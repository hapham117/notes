# Summary:
    # git-scm.com
    # VCS
    # UEFI
    # diff
        # -u (unified, flag for the diff command)
    # wdiff
    # diff -u old_file new_file > change.diff
    # patch
    # vimdiff
    # Staging area (index)
    # Working tree
    # git config -l
    # git commit -a
    # HEAD
    # git log -p
        # git log -p -2
        # git log --graph --oneline
        # git add -p
    # git log --stat
    # git show <optional commit ID>
    # git diff
        # git diff --staged
    # git rm <file name>
    # git mv <file name>
    # .gitignore (file)
        # git add gitignore
    # git checkout <file name>
        # git checkout -p <file name>
    # git reset <file name>
        # git reset -p <file name>
    # git commit --amend
    # git revert <HEAD or commit ID>
    # git branch
        # git branch <new branch name>
        # git checkout <branch name>
        # git branch -d <branch name>
        # git branch -D <branch name>
        # git merge <branch name>
            # git merge --abort
        

# git-scm.com
    # SCM stands for Source Control Management, which basically means VCS (Version Control System)

# VCS:
    # Version Control System
    
# UEFI:
    # Unified Extensible Firmware Interface
    # Successor of BIOS
    # Low-level software that starts when you boot your PC before botting your operating system.
    
# diff:
    # Shell command. Show the differences between the source code/content of two files.
    # Sytax:
        # diff file1 file2
    
    # <
        # Removed lines
    # >
        # Added lines
        
    # Example output:
            # 5c5,6
            # <     assert(type(username) == str), "username must be a string"
            # ---
            # >     if type(username) != str:
            # >         raise TypeError("username must be a string")
            # 11a13,15
            # >         return False
            # >     # Usernames can't begin with a number
            # >     if username[0].isnumeric():
        # Looking at the first line '5c5,6' the first '5' indiciates the line number in the first and second files.
        # The 'c' in between the numbers means that a line was changed.
        # The line that starts with 11a13,15 shows three lines that are new in the second file.
        # The 'a' stands for added
    
    # -u (unified, flag for the diff command):
        # Show diff output in a different format.
        # -
            # Removed lines
        # +
            # Added lines
            
# wdiff:
    # Like diff, but shows the words that have changed in a file, instead of a line.
    
# diff -u old_file new_file > change.diff
    # Redirecting the diff command output to the file 'change.diff'
    
# patch:
    # Takes a file generated by diff and applies the changes to the original file.
    # Syntax example:
        # patch cpu_usage.py < cpu_usage.diff
        
# vimdiff

# Staging area (index):
    # A file maintained by Git that contains all of the information about what files and changes are going to go into your next commit.
    
# Working tree:
    # Contains the current state of the project
    
# git config -l:
    # Shows current config of git.
    
# git commit -a:
    # A shortcut to stage any changes to tracked files and commit them in one step.
    # The -a flag doesn't add new files to the stage.
    
# HEAD:
    # Git uses the HEAD alias to represent the currently checked-out snapshot of your project.
    # There can only be 1 HEAD in each branch.
    
# git log -p:
    # -p stands for patch.
    
    # git log -p -2:
        # Limits the output to the last two entries.
        
    # git log --graph --oneline:
        # --graph is to see the commits as a graph.
        # --oneline is to only see one line per commit.
    
    # git add -p:
        # Allows a user to interactively review patches to add to the current commit.
        # https://git-scm.com/docs/git-add
    
# git log --stat:
    # Show stats about the changes in the commit, like which files were changed and how many lines added or removed.
    
# git show <optional commit ID>:
    # Shows the changes done from a certain commit.
    # If no commit ID is given, shows the latest commit.

# git diff <optional file>:
    # Shows changes between commits, commit and working tree, etc
    
    # git diff --staged:
        # See the differences between last commit and current changes that are staged but not committed yet.
        
# git rm <file name>:
    # Removes the files from the git directory.
    
# git mv <file name>:
    # Rename or move files in the git directory.
    
# .gitignore (file):
    # git add .gitignore
    # A git file with a list of files and directories that git will ignore.
    
# git checkout <file name>:
    # Reverts changes to modified files before they are staged.
    # You're checking out the original file from the latest storage snapshot.
    
    # git checkout -p <file name>:
        # Going line by line to see which latest changes to discard.
        
# git reset <file name>:
    # https://git-scm.com/docs/git-reset#_examples
    # To unstage files.
    # git reset is like the counterpart of git add add.
    
    # git reset -p <file name>:
        # Unstage line by line
        
# git commit --amend:
    # Git will take whatever is currently in our staging area and run the git commit workflow to overwrite the previous commit.
    # IMPORTANT: Avoid amending commits that have already been made public. Only use amend if the previous commit is not pushed yet.
    
# git revert <HEAD or commit ID>:
    # Create a new commit that is the opposite of everything in the given commit. We can revert the latest commit by using the HEAD alias.
    # When entering a commit ID, you can also just enter the first 8 characters from the SHA1 hash/commit ID.
    
# git branch:
    # Shows all the branches in a repository.
    
    # git branch <new branch name>:
        # Creaing a new branch.
    
    # git checkout <branch name>:
        # Switch branches. The working tree will be updated to match the selected branch.
        
    # git checkout -b <branch name>:
        # Create a new branch and then switch to it.
        
    # git branch -d <branch name>:
        # Delete a branch.
        
    # git branch -D <branch name>:
        # Shortcut for: --delete --force
        # Forcibly delete a branch.
        
    # git merge <branch name>:
        # Merging a branch to the current branch you're on.
        # If done correctly, both branches will be pointed at the same commit.
        # Git uses two different algorithms to perform a merge:
            # fast-forward merge:
                # This kind of merge occurs when all the commits in the checked out branch are also in the branch that's being merged. If this is the case, we can say that the commit history of both branches doesn't diverge. There is no fork.
            # three-way merge:
                # Is performed when the history of the merging branches has diverged in some way, and there isn't a nice linear path to combine them via fast-forwarding. This happens when a commit is made on one branch after the point when both branches split.
                
        # git merge --abort:
            # When you run a merge but there is a merge conflict and you don't want to solve it, us this command to abort the merge entirely.